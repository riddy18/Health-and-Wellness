{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We run a linear regression model on the cleaned data. Future plan is to perform cross-validation to improve the generalization of our model. We also plan to improve the model by using non linear models to capture the nonlinearity of the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import sklearn.preprocessing as preprocessing\n",
    "from sklearn.model_selection import train_test_split\n",
    "import sklearn.metrics as metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Max AQI</th>\n",
       "      <th>90th Percentile AQI</th>\n",
       "      <th>Median AQI</th>\n",
       "      <th>BED_UTILIZATION</th>\n",
       "      <th>WA_MALE</th>\n",
       "      <th>WA_FEMALE</th>\n",
       "      <th>BA_MALE</th>\n",
       "      <th>BA_FEMALE</th>\n",
       "      <th>IA_MALE</th>\n",
       "      <th>IA_FEMALE</th>\n",
       "      <th>...</th>\n",
       "      <th>UNHBEHCurrent Smoking</th>\n",
       "      <th>UNHBEHObesity</th>\n",
       "      <th>UNHBEHPhysical Inactivity</th>\n",
       "      <th>UNHBEHSleep &lt;7 hours</th>\n",
       "      <th>noise_mean</th>\n",
       "      <th>case_fatality</th>\n",
       "      <th>PCTUI_Pov</th>\n",
       "      <th>Pov%</th>\n",
       "      <th>OTHER_MALE</th>\n",
       "      <th>OTHER_FEMALE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.623113</td>\n",
       "      <td>20878.0</td>\n",
       "      <td>21729.0</td>\n",
       "      <td>5237.0</td>\n",
       "      <td>6000.0</td>\n",
       "      <td>121.0</td>\n",
       "      <td>145.0</td>\n",
       "      <td>...</td>\n",
       "      <td>19.8</td>\n",
       "      <td>35.5</td>\n",
       "      <td>26.4</td>\n",
       "      <td>38.4</td>\n",
       "      <td>86.665211</td>\n",
       "      <td>0.011949</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.201781</td>\n",
       "      <td>538.0</td>\n",
       "      <td>507.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>74.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>2.254794</td>\n",
       "      <td>94810.0</td>\n",
       "      <td>100388.0</td>\n",
       "      <td>9486.0</td>\n",
       "      <td>10107.0</td>\n",
       "      <td>903.0</td>\n",
       "      <td>839.0</td>\n",
       "      <td>...</td>\n",
       "      <td>18.5</td>\n",
       "      <td>29.4</td>\n",
       "      <td>23.5</td>\n",
       "      <td>36.4</td>\n",
       "      <td>47.636945</td>\n",
       "      <td>0.012346</td>\n",
       "      <td>25.7</td>\n",
       "      <td>0.182297</td>\n",
       "      <td>2042.0</td>\n",
       "      <td>2125.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.430640</td>\n",
       "      <td>6389.0</td>\n",
       "      <td>5745.0</td>\n",
       "      <td>6311.0</td>\n",
       "      <td>5595.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>...</td>\n",
       "      <td>25.5</td>\n",
       "      <td>40.8</td>\n",
       "      <td>36.8</td>\n",
       "      <td>40.9</td>\n",
       "      <td>64.315150</td>\n",
       "      <td>0.021254</td>\n",
       "      <td>18.5</td>\n",
       "      <td>0.378581</td>\n",
       "      <td>172.0</td>\n",
       "      <td>136.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.376219</td>\n",
       "      <td>8766.0</td>\n",
       "      <td>8425.0</td>\n",
       "      <td>2941.0</td>\n",
       "      <td>1822.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>...</td>\n",
       "      <td>23.1</td>\n",
       "      <td>38.4</td>\n",
       "      <td>31.2</td>\n",
       "      <td>40.1</td>\n",
       "      <td>58.173180</td>\n",
       "      <td>0.022697</td>\n",
       "      <td>17.5</td>\n",
       "      <td>0.265817</td>\n",
       "      <td>124.0</td>\n",
       "      <td>139.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.499069</td>\n",
       "      <td>27258.0</td>\n",
       "      <td>28154.0</td>\n",
       "      <td>516.0</td>\n",
       "      <td>462.0</td>\n",
       "      <td>192.0</td>\n",
       "      <td>178.0</td>\n",
       "      <td>...</td>\n",
       "      <td>23.0</td>\n",
       "      <td>33.7</td>\n",
       "      <td>30.1</td>\n",
       "      <td>38.8</td>\n",
       "      <td>54.338911</td>\n",
       "      <td>0.017038</td>\n",
       "      <td>25.2</td>\n",
       "      <td>0.227849</td>\n",
       "      <td>379.0</td>\n",
       "      <td>435.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 44 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Max AQI  90th Percentile AQI  Median AQI  BED_UTILIZATION  WA_MALE  \\\n",
       "0      NaN                  NaN         NaN         0.623113  20878.0   \n",
       "1     74.0                 48.0        37.0         2.254794  94810.0   \n",
       "2      NaN                  NaN         NaN         0.430640   6389.0   \n",
       "3      NaN                  NaN         NaN         0.376219   8766.0   \n",
       "4      NaN                  NaN         NaN         0.499069  27258.0   \n",
       "\n",
       "   WA_FEMALE  BA_MALE  BA_FEMALE  IA_MALE  IA_FEMALE  ...  \\\n",
       "0    21729.0   5237.0     6000.0    121.0      145.0  ...   \n",
       "1   100388.0   9486.0    10107.0    903.0      839.0  ...   \n",
       "2     5745.0   6311.0     5595.0    103.0       67.0  ...   \n",
       "3     8425.0   2941.0     1822.0     53.0       50.0  ...   \n",
       "4    28154.0    516.0      462.0    192.0      178.0  ...   \n",
       "\n",
       "   UNHBEHCurrent Smoking  UNHBEHObesity  UNHBEHPhysical Inactivity  \\\n",
       "0                   19.8           35.5                       26.4   \n",
       "1                   18.5           29.4                       23.5   \n",
       "2                   25.5           40.8                       36.8   \n",
       "3                   23.1           38.4                       31.2   \n",
       "4                   23.0           33.7                       30.1   \n",
       "\n",
       "   UNHBEHSleep <7 hours  noise_mean  case_fatality  PCTUI_Pov      Pov%  \\\n",
       "0                  38.4   86.665211       0.011949       20.0  0.201781   \n",
       "1                  36.4   47.636945       0.012346       25.7  0.182297   \n",
       "2                  40.9   64.315150       0.021254       18.5  0.378581   \n",
       "3                  40.1   58.173180       0.022697       17.5  0.265817   \n",
       "4                  38.8   54.338911       0.017038       25.2  0.227849   \n",
       "\n",
       "   OTHER_MALE  OTHER_FEMALE  \n",
       "0       538.0         507.0  \n",
       "1      2042.0        2125.0  \n",
       "2       172.0         136.0  \n",
       "3       124.0         139.0  \n",
       "4       379.0         435.0  \n",
       "\n",
       "[5 rows x 44 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#load data\n",
    "lr = pd.read_csv(\"base_final.csv\", dtype={'PCTUI_Pov': str})\n",
    "#head of the data\n",
    "lr.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Max AQI', '90th Percentile AQI', 'Median AQI', 'BED_UTILIZATION',\n",
       "       'WA_MALE', 'WA_FEMALE', 'BA_MALE', 'BA_FEMALE', 'IA_MALE', 'IA_FEMALE',\n",
       "       'AA_MALE', 'AA_FEMALE', 'NA_MALE', 'NA_FEMALE', 'HLTHOUTArthritis',\n",
       "       'HLTHOUTCOPD', 'HLTHOUTCancer (except skin)',\n",
       "       'HLTHOUTChronic Kidney Disease', 'HLTHOUTCoronary Heart Disease',\n",
       "       'HLTHOUTCurrent Asthma', 'HLTHOUTDiabetes', 'HLTHOUTMental Health',\n",
       "       'HLTHOUTPhysical Health', 'HLTHOUTStroke', 'HLTHOUTTeeth Loss',\n",
       "       'PREVENTAnnual Checkup', 'PREVENTCervical Cancer Screening',\n",
       "       'PREVENTColorectal Cancer Screening',\n",
       "       'PREVENTCore preventive services for older men',\n",
       "       'PREVENTCore preventive services for older women',\n",
       "       'PREVENTDental Visit', 'PREVENTHealth Insurance', 'PREVENTMammography',\n",
       "       'UNHBEHBinge Drinking', 'UNHBEHCurrent Smoking', 'UNHBEHObesity',\n",
       "       'UNHBEHPhysical Inactivity', 'UNHBEHSleep <7 hours', 'noise_mean',\n",
       "       'case_fatality', 'PCTUI_Pov', 'Pov%', 'OTHER_MALE', 'OTHER_FEMALE'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#drop rows with null values\n",
    "lr1 = lr.dropna(axis =0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#drop columns that ranked low during feature selection\n",
    "X = lr1.drop(columns = ['case_fatality', 'UNHBEHBinge Drinking','HLTHOUTPhysical Health', 'HLTHOUTTeeth Loss', 'HLTHOUTStroke', 'BED_UTILIZATION', 'PREVENTCervical Cancer Screening', '90th Percentile AQI','UNHBEHCurrent Smoking', 'HLTHOUTCOPD', \n",
    " 'PREVENTColorectal Cancer Screening', 'HLTHOUTArthritis'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Max AQI', 'Median AQI', 'WA_MALE', 'WA_FEMALE', 'BA_MALE', 'BA_FEMALE',\n",
       "       'IA_MALE', 'IA_FEMALE', 'AA_MALE', 'AA_FEMALE', 'NA_MALE', 'NA_FEMALE',\n",
       "       'HLTHOUTCancer (except skin)', 'HLTHOUTChronic Kidney Disease',\n",
       "       'HLTHOUTCoronary Heart Disease', 'HLTHOUTCurrent Asthma',\n",
       "       'HLTHOUTDiabetes', 'HLTHOUTMental Health', 'PREVENTAnnual Checkup',\n",
       "       'PREVENTCore preventive services for older men',\n",
       "       'PREVENTCore preventive services for older women',\n",
       "       'PREVENTDental Visit', 'PREVENTHealth Insurance', 'PREVENTMammography',\n",
       "       'UNHBEHObesity', 'UNHBEHPhysical Inactivity', 'UNHBEHSleep <7 hours',\n",
       "       'noise_mean', 'PCTUI_Pov', 'Pov%', 'OTHER_MALE', 'OTHER_FEMALE'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#updated columns of our new dataframe\n",
    "X.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#define target variable\n",
    "y = lr1['case_fatality']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Max AQI</th>\n",
       "      <th>Median AQI</th>\n",
       "      <th>WA_MALE</th>\n",
       "      <th>WA_FEMALE</th>\n",
       "      <th>BA_MALE</th>\n",
       "      <th>BA_FEMALE</th>\n",
       "      <th>IA_MALE</th>\n",
       "      <th>IA_FEMALE</th>\n",
       "      <th>AA_MALE</th>\n",
       "      <th>AA_FEMALE</th>\n",
       "      <th>...</th>\n",
       "      <th>PREVENTHealth Insurance</th>\n",
       "      <th>PREVENTMammography</th>\n",
       "      <th>UNHBEHObesity</th>\n",
       "      <th>UNHBEHPhysical Inactivity</th>\n",
       "      <th>UNHBEHSleep &lt;7 hours</th>\n",
       "      <th>noise_mean</th>\n",
       "      <th>PCTUI_Pov</th>\n",
       "      <th>Pov%</th>\n",
       "      <th>OTHER_MALE</th>\n",
       "      <th>OTHER_FEMALE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>74.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>94810.0</td>\n",
       "      <td>100388.0</td>\n",
       "      <td>9486.0</td>\n",
       "      <td>10107.0</td>\n",
       "      <td>903.0</td>\n",
       "      <td>839.0</td>\n",
       "      <td>932.0</td>\n",
       "      <td>1448.0</td>\n",
       "      <td>...</td>\n",
       "      <td>13.6</td>\n",
       "      <td>74.0</td>\n",
       "      <td>29.4</td>\n",
       "      <td>23.5</td>\n",
       "      <td>36.4</td>\n",
       "      <td>47.636945</td>\n",
       "      <td>25.7</td>\n",
       "      <td>0.182297</td>\n",
       "      <td>2042.0</td>\n",
       "      <td>2125.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>47.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>29676.0</td>\n",
       "      <td>31785.0</td>\n",
       "      <td>8345.0</td>\n",
       "      <td>8834.0</td>\n",
       "      <td>212.0</td>\n",
       "      <td>201.0</td>\n",
       "      <td>270.0</td>\n",
       "      <td>340.0</td>\n",
       "      <td>...</td>\n",
       "      <td>14.4</td>\n",
       "      <td>77.0</td>\n",
       "      <td>35.1</td>\n",
       "      <td>27.5</td>\n",
       "      <td>38.8</td>\n",
       "      <td>62.698557</td>\n",
       "      <td>19.9</td>\n",
       "      <td>0.192970</td>\n",
       "      <td>688.0</td>\n",
       "      <td>766.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>92.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>40115.0</td>\n",
       "      <td>42386.0</td>\n",
       "      <td>7542.0</td>\n",
       "      <td>8560.0</td>\n",
       "      <td>334.0</td>\n",
       "      <td>293.0</td>\n",
       "      <td>412.0</td>\n",
       "      <td>429.0</td>\n",
       "      <td>...</td>\n",
       "      <td>16.1</td>\n",
       "      <td>75.4</td>\n",
       "      <td>36.9</td>\n",
       "      <td>31.0</td>\n",
       "      <td>38.8</td>\n",
       "      <td>50.429461</td>\n",
       "      <td>19.8</td>\n",
       "      <td>0.267143</td>\n",
       "      <td>927.0</td>\n",
       "      <td>965.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>129.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>169820.0</td>\n",
       "      <td>179696.0</td>\n",
       "      <td>130550.0</td>\n",
       "      <td>155711.0</td>\n",
       "      <td>917.0</td>\n",
       "      <td>947.0</td>\n",
       "      <td>5599.0</td>\n",
       "      <td>6187.0</td>\n",
       "      <td>...</td>\n",
       "      <td>14.5</td>\n",
       "      <td>81.8</td>\n",
       "      <td>34.6</td>\n",
       "      <td>27.5</td>\n",
       "      <td>39.7</td>\n",
       "      <td>44.628149</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.237729</td>\n",
       "      <td>4198.0</td>\n",
       "      <td>4566.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>26.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>12596.0</td>\n",
       "      <td>13161.0</td>\n",
       "      <td>1686.0</td>\n",
       "      <td>1896.0</td>\n",
       "      <td>936.0</td>\n",
       "      <td>970.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>...</td>\n",
       "      <td>16.9</td>\n",
       "      <td>72.4</td>\n",
       "      <td>35.5</td>\n",
       "      <td>29.9</td>\n",
       "      <td>38.5</td>\n",
       "      <td>70.760733</td>\n",
       "      <td>21.9</td>\n",
       "      <td>0.242970</td>\n",
       "      <td>778.0</td>\n",
       "      <td>821.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Max AQI  Median AQI   WA_MALE  WA_FEMALE   BA_MALE  BA_FEMALE  IA_MALE  \\\n",
       "1      74.0        37.0   94810.0   100388.0    9486.0    10107.0    903.0   \n",
       "25     47.0        33.0   29676.0    31785.0    8345.0     8834.0    212.0   \n",
       "27     92.0        35.0   40115.0    42386.0    7542.0     8560.0    334.0   \n",
       "36    129.0        46.0  169820.0   179696.0  130550.0   155711.0    917.0   \n",
       "39     26.0        13.0   12596.0    13161.0    1686.0     1896.0    936.0   \n",
       "\n",
       "    IA_FEMALE  AA_MALE  AA_FEMALE  ...  PREVENTHealth Insurance  \\\n",
       "1       839.0    932.0     1448.0  ...                     13.6   \n",
       "25      201.0    270.0      340.0  ...                     14.4   \n",
       "27      293.0    412.0      429.0  ...                     16.1   \n",
       "36      947.0   5599.0     6187.0  ...                     14.5   \n",
       "39      970.0     33.0       40.0  ...                     16.9   \n",
       "\n",
       "    PREVENTMammography  UNHBEHObesity  UNHBEHPhysical Inactivity  \\\n",
       "1                 74.0           29.4                       23.5   \n",
       "25                77.0           35.1                       27.5   \n",
       "27                75.4           36.9                       31.0   \n",
       "36                81.8           34.6                       27.5   \n",
       "39                72.4           35.5                       29.9   \n",
       "\n",
       "    UNHBEHSleep <7 hours  noise_mean  PCTUI_Pov      Pov%  OTHER_MALE  \\\n",
       "1                   36.4   47.636945       25.7  0.182297      2042.0   \n",
       "25                  38.8   62.698557       19.9  0.192970       688.0   \n",
       "27                  38.8   50.429461       19.8  0.267143       927.0   \n",
       "36                  39.7   44.628149       20.0  0.237729      4198.0   \n",
       "39                  38.5   70.760733       21.9  0.242970       778.0   \n",
       "\n",
       "    OTHER_FEMALE  \n",
       "1         2125.0  \n",
       "25         766.0  \n",
       "27         965.0  \n",
       "36        4566.0  \n",
       "39         821.0  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#preprocess data\n",
    "std = preprocessing.StandardScaler()\n",
    "# X is a matrix\n",
    "std.fit(X)\n",
    "X_std = std.transform(X)\n",
    "\n",
    "#scale data\n",
    "minmax = preprocessing.MinMaxScaler()\n",
    "minmax.fit(X)\n",
    "X_minmax = minmax.transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#divide data into train and test sets\n",
    "train_x, test_x, train_y, test_y = train_test_split(X_minmax, y,\n",
    "                                                    test_size=0.2,\n",
    "                                                    random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#linear model\n",
    "lr = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sklearn.metrics as metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fit model to data\n",
    "lr.fit(train_x, train_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#predicted values from our model on the test set\n",
    "pred_y = lr.predict(test_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error 5.080415498948976e-05\n"
     ]
    }
   ],
   "source": [
    "#calculate mean squared error\n",
    "mse = metrics.mean_squared_error(test_y, pred_y)\n",
    "print(\"Mean Squared Error {}\".format(mse))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "#r-squared\n",
    "from sklearn.metrics import r2_score\n",
    "r2_score = r2_score(test_y, pred_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'numpy.float64' object is not callable",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-33-4e4e90f4bbfe>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_xlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Actual'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_ylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Predicted'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_title\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'R2: '\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr2_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_y\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpred_y\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;31m#regression line\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mtest_y\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpred_y\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest_y\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpred_y\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: 'numpy.float64' object is not callable"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "fig, ax = plt.subplots()\n",
    "ax.scatter(test_y, pred_y)\n",
    "ax.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=4)\n",
    "ax.set_xlabel('Actual')\n",
    "ax.set_ylabel('Predicted')\n",
    "ax.set_title('R2: ' + str(r2_score(test_y, pred_y)))\n",
    "#regression line\n",
    "test_y, pred_y = test_y.reshape(-1,1), pred_y.reshape(-1,1)\n",
    "ax.plot(pred_y, LinearRegression().fit(test_y, pred_y).predict(test_y))\n",
    "\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
